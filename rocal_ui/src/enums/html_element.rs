use std::fmt;

use syn::{
    parse::{Parse, ParseStream},
    Ident,
};

#[derive(Debug, Clone)]
pub enum HtmlElement {
    Html,
    Base,
    Head,
    Link,
    Meta,
    Style,
    Title,
    Body,
    Address,
    Article,
    Aside,
    Footer,
    Header,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    Hgroup,
    Main,
    Nav,
    Section,
    Search,
    Blockquote,
    Dd,
    Div,
    Dl,
    Dt,
    Figcaption,
    Figure,
    Hr,
    Li,
    Menu,
    Ol,
    P,
    Pre,
    Ul,
    A,
    Abbr,
    B,
    Bdi,
    Bdo,
    Br,
    Cite,
    Code,
    Data,
    Dfn,
    Em,
    I,
    Kbd,
    Mark,
    Q,
    Rp,
    Rt,
    Ruby,
    S,
    Samp,
    Small,
    Span,
    Strong,
    Sub,
    Sup,
    Time,
    U,
    Var,
    Wbr,
    Area,
    Audio,
    Img,
    Map,
    Track,
    Video,
    Embed,
    Fencedframe,
    Iframe,
    Object,
    Picture,
    Source,
    Svg,
    Math,
    Canvas,
    Noscript,
    Script,
    Del,
    Ins,
    Caption,
    Col,
    Colgroup,
    Table,
    Tbody,
    Td,
    Tfoot,
    Th,
    Thead,
    Tr,
    Button,
    Datalist,
    FieldSet,
    Form,
    Input,
    Label,
    Legend,
    Meter,
    Optgroup,
    Option,
    Output,
    Progress,
    Select,
    Selectedcontent,
    Textarea,
    Details,
    Dialog,
    Summary,
    Slot,
    Template,
    Fragment,
}

impl HtmlElement {
    const VOID_ELEMENTS: [HtmlElement; 13] = [
        HtmlElement::Area,
        HtmlElement::Base,
        HtmlElement::Br,
        HtmlElement::Col,
        HtmlElement::Embed,
        HtmlElement::Hr,
        HtmlElement::Img,
        HtmlElement::Input,
        HtmlElement::Link,
        HtmlElement::Meta,
        HtmlElement::Source,
        HtmlElement::Track,
        HtmlElement::Wbr,
    ];

    const OPTIONAL_CLOSING_ELEMENTS: [HtmlElement; 15] = [
        HtmlElement::Html,
        HtmlElement::Head,
        HtmlElement::Body,
        HtmlElement::P,
        HtmlElement::Li,
        HtmlElement::Dt,
        HtmlElement::Dd,
        HtmlElement::Option,
        HtmlElement::Thead,
        HtmlElement::Th,
        HtmlElement::Tbody,
        HtmlElement::Tr,
        HtmlElement::Td,
        HtmlElement::Tfoot,
        HtmlElement::Colgroup,
    ];

    pub fn is_void(&self) -> bool {
        Self::VOID_ELEMENTS.contains(&self)
    }
}

impl fmt::Display for HtmlElement {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let tag = match self {
            HtmlElement::Html => "html",
            HtmlElement::Base => "base",
            HtmlElement::Head => "head",
            HtmlElement::Link => "link",
            HtmlElement::Meta => "meta",
            HtmlElement::Style => "style",
            HtmlElement::Title => "title",
            HtmlElement::Body => "body",
            HtmlElement::Address => "address",
            HtmlElement::Article => "article",
            HtmlElement::Aside => "aside",
            HtmlElement::Footer => "footer",
            HtmlElement::Header => "header",
            HtmlElement::H1 => "h1",
            HtmlElement::H2 => "h2",
            HtmlElement::H3 => "h3",
            HtmlElement::H4 => "h4",
            HtmlElement::H5 => "h5",
            HtmlElement::H6 => "h6",
            HtmlElement::Hgroup => "hgroup",
            HtmlElement::Main => "main",
            HtmlElement::Nav => "nav",
            HtmlElement::Section => "section",
            HtmlElement::Search => "search",
            HtmlElement::Blockquote => "blockquote",
            HtmlElement::Dd => "dd",
            HtmlElement::Div => "div",
            HtmlElement::Dl => "dl",
            HtmlElement::Dt => "dt",
            HtmlElement::Figcaption => "figcaption",
            HtmlElement::Figure => "figure",
            HtmlElement::Hr => "hr",
            HtmlElement::Li => "li",
            HtmlElement::Menu => "menu",
            HtmlElement::Ol => "ol",
            HtmlElement::P => "p",
            HtmlElement::Pre => "pre",
            HtmlElement::Ul => "ul",
            HtmlElement::A => "a",
            HtmlElement::Abbr => "abbr",
            HtmlElement::B => "b",
            HtmlElement::Bdi => "bdi",
            HtmlElement::Bdo => "bdo",
            HtmlElement::Br => "br",
            HtmlElement::Cite => "cite",
            HtmlElement::Code => "code",
            HtmlElement::Data => "data",
            HtmlElement::Dfn => "dfn",
            HtmlElement::Em => "em",
            HtmlElement::I => "i",
            HtmlElement::Kbd => "kbd",
            HtmlElement::Mark => "mark",
            HtmlElement::Q => "q",
            HtmlElement::Rp => "rp",
            HtmlElement::Rt => "rt",
            HtmlElement::Ruby => "ruby",
            HtmlElement::S => "s",
            HtmlElement::Samp => "samp",
            HtmlElement::Small => "small",
            HtmlElement::Span => "span",
            HtmlElement::Strong => "strong",
            HtmlElement::Sub => "sub",
            HtmlElement::Sup => "sup",
            HtmlElement::Time => "time",
            HtmlElement::U => "u",
            HtmlElement::Var => "var",
            HtmlElement::Wbr => "wbr",
            HtmlElement::Area => "area",
            HtmlElement::Audio => "audio",
            HtmlElement::Img => "img",
            HtmlElement::Map => "map",
            HtmlElement::Track => "track",
            HtmlElement::Video => "video",
            HtmlElement::Embed => "embed",
            HtmlElement::Fencedframe => "fencedframe",
            HtmlElement::Iframe => "iframe",
            HtmlElement::Object => "object",
            HtmlElement::Picture => "picture",
            HtmlElement::Source => "source",
            HtmlElement::Svg => "svg",
            HtmlElement::Math => "math",
            HtmlElement::Canvas => "canvas",
            HtmlElement::Noscript => "noscript",
            HtmlElement::Script => "script",
            HtmlElement::Del => "del",
            HtmlElement::Ins => "ins",
            HtmlElement::Caption => "caption",
            HtmlElement::Col => "col",
            HtmlElement::Colgroup => "colgroup",
            HtmlElement::Table => "table",
            HtmlElement::Tbody => "tbody",
            HtmlElement::Td => "td",
            HtmlElement::Tfoot => "tfoot",
            HtmlElement::Th => "th",
            HtmlElement::Thead => "thead",
            HtmlElement::Tr => "tr",
            HtmlElement::Button => "button",
            HtmlElement::Datalist => "datalist",
            HtmlElement::FieldSet => "fieldset",
            HtmlElement::Form => "form",
            HtmlElement::Input => "input",
            HtmlElement::Label => "label",
            HtmlElement::Legend => "legend",
            HtmlElement::Meter => "meter",
            HtmlElement::Optgroup => "optgroup",
            HtmlElement::Option => "option",
            HtmlElement::Output => "output",
            HtmlElement::Progress => "progress",
            HtmlElement::Select => "select",
            HtmlElement::Selectedcontent => "selectedcontent",
            HtmlElement::Textarea => "textarea",
            HtmlElement::Details => "details",
            HtmlElement::Dialog => "dialog",
            HtmlElement::Summary => "summary",
            HtmlElement::Slot => "slot",
            HtmlElement::Template => "template",
            HtmlElement::Fragment => "",
        };

        write!(f, "{tag}")
    }
}

impl HtmlElement {
    pub fn from_str(s: &str) -> Option<Self> {
        use HtmlElement::*;
        match s {
            "html" => Some(Html),
            "base" => Some(Base),
            "head" => Some(Head),
            "link" => Some(Link),
            "meta" => Some(Meta),
            "style" => Some(Style),
            "title" => Some(Title),
            "body" => Some(Body),
            "address" => Some(Address),
            "article" => Some(Article),
            "aside" => Some(Aside),
            "footer" => Some(Footer),
            "header" => Some(Header),
            "h1" => Some(H1),
            "h2" => Some(H2),
            "h3" => Some(H3),
            "h4" => Some(H4),
            "h5" => Some(H5),
            "h6" => Some(H6),
            "hgroup" => Some(Hgroup),
            "main" => Some(Main),
            "nav" => Some(Nav),
            "section" => Some(Section),
            "search" => Some(Search),
            "blockquote" => Some(Blockquote),
            "dd" => Some(Dd),
            "div" => Some(Div),
            "dl" => Some(Dl),
            "dt" => Some(Dt),
            "figcaption" => Some(Figcaption),
            "figure" => Some(Figure),
            "hr" => Some(Hr),
            "li" => Some(Li),
            "menu" => Some(Menu),
            "ol" => Some(Ol),
            "p" => Some(P),
            "pre" => Some(Pre),
            "ul" => Some(Ul),
            "a" => Some(A),
            "abbr" => Some(Abbr),
            "b" => Some(B),
            "bdi" => Some(Bdi),
            "bdo" => Some(Bdo),
            "br" => Some(Br),
            "cite" => Some(Cite),
            "code" => Some(Code),
            "data" => Some(Data),
            "dfn" => Some(Dfn),
            "em" => Some(Em),
            "i" => Some(I),
            "kbd" => Some(Kbd),
            "mark" => Some(Mark),
            "q" => Some(Q),
            "rp" => Some(Rp),
            "rt" => Some(Rt),
            "ruby" => Some(Ruby),
            "s" => Some(S),
            "samp" => Some(Samp),
            "small" => Some(Small),
            "span" => Some(Span),
            "strong" => Some(Strong),
            "sub" => Some(Sub),
            "sup" => Some(Sup),
            "time" => Some(Time),
            "u" => Some(U),
            "var" => Some(Var),
            "wbr" => Some(Wbr),
            "area" => Some(Area),
            "audio" => Some(Audio),
            "img" => Some(Img),
            "map" => Some(Map),
            "track" => Some(Track),
            "video" => Some(Video),
            "embed" => Some(Embed),
            "fencedframe" => Some(Fencedframe),
            "iframe" => Some(Iframe),
            "object" => Some(Object),
            "picture" => Some(Picture),
            "source" => Some(Source),
            "svg" => Some(Svg),
            "math" => Some(Math),
            "canvas" => Some(Canvas),
            "noscript" => Some(Noscript),
            "script" => Some(Script),
            "del" => Some(Del),
            "ins" => Some(Ins),
            "caption" => Some(Caption),
            "col" => Some(Col),
            "colgroup" => Some(Colgroup),
            "table" => Some(Table),
            "tbody" => Some(Tbody),
            "td" => Some(Td),
            "tfoot" => Some(Tfoot),
            "th" => Some(Th),
            "thead" => Some(Thead),
            "tr" => Some(Tr),
            "button" => Some(Button),
            "datalist" => Some(Datalist),
            "fieldset" => Some(FieldSet),
            "form" => Some(Form),
            "input" => Some(Input),
            "label" => Some(Label),
            "legend" => Some(Legend),
            "meter" => Some(Meter),
            "optgroup" => Some(Optgroup),
            "option" => Some(Option),
            "output" => Some(Output),
            "progress" => Some(Progress),
            "select" => Some(Select),
            "selectedcontent" => Some(Selectedcontent),
            "textarea" => Some(Textarea),
            "details" => Some(Details),
            "dialog" => Some(Dialog),
            "summary" => Some(Summary),
            "slot" => Some(Slot),
            "template" => Some(Template),
            "fragment" => Some(Fragment),
            _ => None,
        }
    }
}

impl PartialEq for HtmlElement {
    fn eq(&self, other: &Self) -> bool {
        self.to_string() == other.to_string()
    }
}

impl Parse for HtmlElement {
    fn parse(input: ParseStream) -> Result<Self, syn::Error> {
        let element: Ident = input.parse()?;
        let element = HtmlElement::from_str(&element.to_string())
            .ok_or(HtmlElement::Fragment)
            .map_err(|_| syn::Error::new(input.span(), "The element is unavailable in HTML5"))?;
        Ok(element)
    }
}
